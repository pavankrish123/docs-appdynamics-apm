---
title: AppDynamics Older Releases [Deprecated]
owner: Partners
---

Documentation for AppDynamics v1.x releases.


## <a id='old-releases'></a> Older Releases

### <a id='v1-2-4'></a> v1.2.4

**Release Date: January 8, 2018**

Features included in this release:

 - Fix for insufficient memory when using Java Buildpack v4.0+
 - DB agent upgraded to `4.2.15.18`

This topic describes how to upgrade to v1.2.3 of the AppDynamics APM tile for VMware Tanzu.

### <a id='v1-2-3'></a> v1.2.3

**Release Date: October 2, 2017**

Features included in this release:

 - Fix for insufficient memory when using Java Buildpack v4.0+

### <a id='v1-2-2'></a> v1.2.2

**Release Date: September 22, 2017**

Features included in this release:

 - Updates to stemcell 3445 to patch Ubuntu Linux kernel security vulnerability (USN-3385-2)

### <a id='v1-2-1'></a> v1.2.1

**Release Date: May 16, 2017**

Features included in this release:

 - Fix for CVE-2017-4975
 - Update stem cell version to **3363.22**

### <a id='v1-2-0'></a> v1.2.0

**Release Date: February 1, 2017**

Features included in this release:

 - Customize YAML file to specify which metrics to pull in from JMX bridge
 - Update stem cell version to **3262.22**

### <a id='v1-1-2'></a> v1.1.2

**Release Date: September 8, 2016**

Features included in this release:

 - Fixed bug in destroy-analytics-agent errand which prevented clean deletion of v1.1.1 of tile
 - Updated the stem cell version to **3146.20**
 - UI changes to the tile

### <a id='v1-1-1'></a> v1.1.1

**Release Date: July 26, 2016**

Features included in this release:

 - Added support for AppDynamics **Database Monitoring**
 - Added support for AppDynamics **Transaction Analytics**
 - **Web Proxy Config** is now a separate configuration tab
 - Updated the stem cell version to **3146.12**

### <a id='v1-0-1'></a> v1.0.1

**Release Date: February 20, 2016**

Features included in this release:

 - Updated stemcell to v3146.9
 - Fixed machine agent related issue for multiple VMware Tanzu installations
 - TierName, NodeName and UniqueHostID suffixed with DomainName
 - Support for **OpenTSDB Firehose Nozzle**; support for all Cloud Foundry deployment metrics


## <a id='installing'></a> Installing AppDynamics v1.x Tile

1. Download the product file from the [AppDynamics Product page](https://network.pivotal.io/products/p-appdynamics) on the [Pivotal Network](https://network.pivotal.io/).

1. Log in to VMware Tanzu Ops Manager.

1. Click **Import a Product** and import the AppDynamics product file.
    <%= image_tag("./images/import-product.png") %>

1. Select the **AppDynamics Service Broker**.<br>
    <%= image_tag("./images/select-appdynamics.png") %>

1. Click **Add** on the **AppDynamics Service Broker** tile to add this product to your staging area.

1. Click the newly added tile to review any configurable options. For more information, see [Configuring the AppDynamics Tile](#configuring).
    <%= image_tag("./images/configure-appdynamics.png") %>

1. Click **Apply Changes** to apply the configuration.

### <a id='configuring'></a> Configure the AppDynamics Tile

1. From the **Ops Manager Installation Dashboard**, click the **AppDynamics Service Broker** tile.
    <%= image_tag("./images/select.png") %>

1. Select **Service Broker Application**.
    <%= image_tag("default.png") %>
    1. Before creating Service Plans, you must collect the license keys from the
      AppDynamics Dashboard.
        1. Log in to your AppDynamics account and click the gear icon in the upper right corner of the page.<br>
          <%= image_tag("./images/settings.png") %>
        1. Select **License**.<br>
          <%= image_tag("./images/license.png") %>
        1. Record the details of the license access key and controller.
          <%= image_tag("./images/details.png") %>
    1. Click **Add** on the far right of the Service Plan screen to create a new service plan.
    1. Enter the **Account Name** and **Account Access Key** from the license page along with controller binding credentials (`ip`, `port`, `ssl-enabled`). The plan name and plan description are user-defined.
        <%= image_tag("./images/create-plan.png") %>
    1. (Optional) Create additional service plans for the same account key.
    1. Complete the database fields.
    1. Click **Save** to save the information for this plan.

1. Select **Machine Agent Extension**.
    1. Ensure that the Pivotal Ops Metrics/JMX Bridge tile has been installed and JMX VM is running.
    <p class="note"><strong>Note:</strong> In VMware Tanzu v1.7 and later, Pivotal Ops Metrics is renamed JMX Bridge.</p>
    1. Give a user-defined **Application Name**. This name should be unique across multiple VMware Tanzu installations.
    1. Complete the **AppDynamics Controller**, **Account Name**, and **Account Access Keys** fields.
        <%= image_tag("./images/machine-agent.png") %>
    1. If you do not want to override the default configuration, select **Disable**. If you want to override the default configuration, select **Enable** and specify the metrics that you want to pull in from JMX Bridge in your Cloud Foundry `config.yml` file. Use this [template](https://github.com/Appdynamics/cloud-foundry-extension/blob/VMware Tanzu-Service-Broker/conf/config.yaml) to override the `config.yml` file.
        <%= image_tag("./images/OverrideJMX.png") %>
    1. Fill in the JMX Bridge Server IP and Port (default: `44444`).
        <%= image_tag("./images/JMX_Bridge.png") %>
    1. Fill in the credentials to connect to the server. Select the **JMX Authentication** checkbox.
    1. The AppDynamics tile does not support communication with JMX Bridge over SSL. In the **JMX Provider** section of the JMX Bridge tile, uncheck the **Enable SSL** checkbox.
        <%= image_tag("./images/DisabledJMXBridge.png") %>
    1. Disable SSL in the AppDynamics tile.
        <%= image_tag("./images/DisabledSSL.png") %>
    1. Click **Save**.

1. Select **Analytics Agent**. Follow the instructions in the [Installling and Configuring Application Analytics for VMware Tanzu](https://docs.pivotal.io/partners/appdynamics-analytics/installing.html) topic to complete this section of the tile.

1. Select **Web Proxy Configuration**.
![ProxyServerConfig](images/Proxy_Server_Config.png)

1. To use a proxy server between your VMware Tanzu instance and the AppDynamics Controller, select **Enable** and complete the following fields:
     * **Web Proxy Host Name/IP**: Enter the IP address or host name of the proxy server.
     * **Web Proxy Port**: Enter the port number on which the proxy server listens.
     * **HTTP Web Proxy Auth Enabled**: If your proxy server requires authentication, check this checkbox and complete the following fields:
         * **Web Proxy Username**: Enter the username for authenticating with the proxy server. The default for no authentication is `_none_`.
         * **Web Proxy Password**: Enter the password for authenticating with the proxy.

1. Click **Save**.

1. If relevant for your version of VMware Tanzu, set the correct **Collector** instance count in the Elastic Runtime tile **Resource Config** pane:
  * VMware Tanzu v1.7 or earlier: Ensure that the **Collector** count is to `1` and click **Save** if changed.
  * VMware Tanzu v1.8: Ensure that the **Collector** count is set to `0` and click **Save** if changed.
  * VMware Tanzu v1.9 or later: No action is needed. VMware Tanzu v1.9 and later have no Collector component.

1. When finished configuring the AppDynamics tile and any other tile changes, return to the **Ops Manager Installation Dashboard** and click **Apply Changes**.

### <a id='bind-instance'></a> Create and Bind a Service Instance

1. For new applications, use the `cf push` command to deploy your application, using the appropriate language buildpack.
  * Java:
    <pre class="terminal">
      $ cf push APPNAME -b  https:/<span>/</span>github.com/appdynamics/java-buildpack
    </pre>
  * PHP:
    <pre class="terminal">
      $ cf push APPNAME -b  https:/<span>/</span>github.com/appdynamics/php-buildpack
    </pre>

1. Log in to Apps Manager and navigate to the Services Marketplace.
    <%= image_tag("./images/marketplace.png") %>

1. View AppDynamics Service Plans.
    <%= image_tag("./images/plans.png") %>

1. Bind the AppDynamics Service to an application.
    <%= image_tag("./images/bind.png") %>

1. In a terminal window, use the `cf restage` command to make the changes effective.
    <pre class='terminal'>
      $ cf restage APPNAME
    </pre>

1. Confirm that your application node is reporting to the Controller by logging in to AppDynamics. Your application should appear in the **Applications** list or as a node in the Application Dashboard:
    <br><br>
    <%= image_tag("./images/dashboard.png") %>

1. Select **Top Business Transactions**, **Network Dashboard**, and **Transaction Snapshots** to display other views of the AppDynamics Application Dashboard.
    <%= image_tag("./images/dashboard2.png") %>
    <%= image_tag("./images/dashboard3.png") %>
    <%= image_tag("./images/dashboard4.png") %>

1. To check VMware Tanzu Ops Metrics, check for an application named **AppDynamicsVMware TanzuOpsMetrics** in the controller UI. The Application Dashboard for this application should be empty, since it only reports metrics of VMware Tanzu. To see the metrics, select **Home > AppDynamicsVMware TanzuOpsMetrics > Metric Browser > Application Infrastructure Performance > MachineAgentTier > Custom Metrics > CF**. This lists all underlying components of VMware Tanzu such as CloudController and Router.
    <%= image_tag("./images/view12.2.1.png") %>

### <a id='http-proxy'></a> Configuration with HTTP Proxy

If the Cloud Foundry environment needs to use an HTTP(S) proxy for external outbound communication, the Service Broker itself does not need to know anything about the HTTP proxy, as it just relays the license keys to the consumer apps. The consumer application should specify the `http\_proxy` or `https\_proxy` as an environment variable for the agent to communicate externally with non-Java applications, and use `JAVA_OPTS` for Java applications.

* Specify using `http\_proxy` for the AppDynamics non-Java application agent to talk to its controller via the proxy.
  <pre class='terminal'>
  $ cf set-env APPNAME http\_proxy ‘<span>http</span>://user:password<span>@</span>proxy-server.customer.com:8080'
  ...
  $ cf set-env APPNAME https\_proxy ‘<span>http</span>://user:password<span>@</span>proxy-server.customer.com:8080'
  </pre>

* Specify using `JAVA_OPTS` for the AppDynamics Java application agent to talk to its controller via the proxy.
  <pre class='terminal'>
  $ cf set-env APPNAME JAVA_OPTS "
  -D test.value=barbar
  -D appdynamics.http.proxyHost=proxy.customer.com
  -D appdynamics.http.proxyPort=8080 "
  </pre>

* If a Java application also needs to talk through a proxy, provide standard Java HTTP arguments.
  <pre class='terminal'>
  $ cf set-env APPNAME JAVA_OPTS "
  -D test.value=barbar -D appdynamics.http.proxyHost=proxy.customer.com
  -D appdynamics.http.proxyPort=8080  -D http.proxyHost=proxy.customer.com
  -D http.proxyPort=8080 -D https.proxyHost=proxy.customer.com
  -D https.proxyPort=8080  "
  </pre>

Whenever making changes to Cloud Foundry environment variables, you must restage your application(s) to make the changes effective.

<pre class='terminal'>
  $ cf restage APPNAME
</pre>

You can set these environment variables either individually per app, or with environment variable groups set for all apps as part of staging, running environments, etcetera using the cf CLI.

### <a id="env-var"></a> Environment Variable Groups

* `running-environment-variable-group`, `revg`: Retrieve the contents of the running environment variable group
* `staging-environment-variable-group`, `sevg`: Retrieve the contents of the staging environment variable group
* `set-staging-environment-variable-group`, `ssevg`: Pass parameters as JSON to create a staging environment variable group
* `set-running-environment-variable-group`, `srevg`: Pass parameters as JSON to create a running environment variable group

Use the `JAVA_OPTS` environment variable to specify AppDynamics Agent-specific environment variables in the Staging environment group so the Java Buildpack can use that and push it in the correct place. Specifying `JAVA_OPTS` in the Runtime environment variable group will not yield anything, as the buildpack will not know about it.

Example:

<pre class='terminal'>
  $ cf ssevg '{ "JAVA_OPTS" : " -Dtest.value=barbar
  -Dappdynamics.http.proxyHost=proxy.customer.com
  -Dappdynamics.http.proxyPort=8080 -Dhttp.proxyHost=proxy.customer.com
  -Dhttp.proxyPort=8080 -Dhttps.proxyHost=proxy.customer.com
  -Dhttps.proxyPort=8080 -Dspring.profiles.active=dev ", "test_env_profile" :
  "Staging" }'
</pre>


## <a id="machine-agent"></a> Troubleshooting v1.x Machine Agent

If the machine agent does not expose any metrics in the AppDynamics dashboard:

* If you are using VMware Tanzu v1.7 or earlier, check the Elastic Runtime tile **Resource Config** pane to ensure that you are running a **Collector** job with an instance count of `1`.
* Ensure the JMX Bridge tile is installed and verify the admin credentials, IP address, and port of the Metrics instance.
* If a proxy exists, the machine agent might not be able to reach out. Add the following environment variable parameters to the "AppDynamicsVMware TanzuOpsMetrics" app in the AppDynamicsVMware TanzuOpsMetrics-related Org and Space:

<pre class='terminal'>
  $ cf set-env AppDynamicsVMware TanzuOpsMetrics JAVA_OPTS "
  -Dappdynamics.http.proxyHost=proxy.customer.com
  -Dappdynamics.http.proxyPort=8080 -Dhttp.proxyHost=proxy.customer.com
  -Dhttp.proxyPort=8080 -Dhttps.proxyHost=proxy.customer.com
  -Dhttps.proxyPort=8080
  -Dextension.pcf.jmx.serviceURL=service:jmx:rmi:///jndi/rmi://10.x.y.z:44444/jmxrmi
  -Dextension.pcf.jmx.username=admin
  -Dextension.pcf.jmx.password=OpsMetricsAdminPassword
  -Dappdynamics.agent.maxMetrics=5000
  -Dlog4j.configuration=file:/home/vcap/app/conf/logging/log4j.xml
  -DanyAdditionalParameter=Value"
</pre>

Edit the above values as needed for IP addresses, passwords, proxy host, and port.


## <a id="reference"></a> Further Reference

For more information, see the following topics:

* [App Agent for Java Configuration Properties: Proxy Properties for the Controller](https://docs.appdynamics.com/display/PRO14S/App+Agent+for+Java+Configuration+Properties#AppAgentforJavaConfigurationProperties-ProxyPropertiesfortheController), from the AppDynamics Documentation.
* [Machine Agent Configuration Properties: Proxy Properties for the Controller](https://docs.appdynamics.com/display/PRO14S/Machine+Agent+Configuration+Properties#MachineAgentConfigurationProperties-ProxyPropertiesfortheController), from the AppDynamics Documentation.
* [Cloud Foundry Buildpacks in Restricted Networks](http://blog.grogscave.net/2015/02/cloud-foundry-buildpacks-in-restricted.html), from Chris DeLashmutt's blog.

<!-- TODO: Move this section to a new page. Would be better for Pavan to explain workflow and Doug to write from scratch. -->
## <a id="Analytics"></a> AppDynamics v1.x Transactional Analytics

 - Transaction Analytics feature is supported on v1.1.1 and later.
 - If your AppDynamics controller has license for Analytics monitoring, you can monitor application analytics.
 - Supported Analytics Agent version: **4.1.8.0**.
 - Applications supported on Analytics Agent: **Java, .NET**.
 - The analytics agent is compatible with Controller v4.1.8.0 and above.

### <a id="overview"></a> Overview

The application agent forwards analytics data to the analytics agent, which sends the data to the event service. The Controller queries the event service to fetch the analytics data and renders it on the Controller dashboard.

![Analytics Agent Working](../images/pdf1.png)

 - **AppDynamics App Agent**: Application Analytics relies on the same app agents that AppDynamics APM uses. If you already use AppDynamics APM, you likely already have these deployed to your monitored applications.
 - **Analytics Agent**: The Analytics Agent collects data from one or more app agents and sends it to the Events Service.
 - **Analytics Plugin** (AP) to the app agent: The Analytics Plugin extends app agent functionality so that it can collect and forward data to the Analytics Agent.
 - **Event Service**: The event service is an unstructured document store which acts as a place holder for analytics data. If you do not already have an event service running, contact AppDynamics support to get one.
 - **Controller**: The Controller queries the event service and renders analytics data to the Controller dashboard.

### <a id="multi-node"></a> Deploying Analytics Agents to Multiple Nodes

A real-world scenario is unlikely to consist of a single monitored node, as shown in the diagram above. It usually consists of many applications deployed over many hosts.

There must be at least one Analytics Agent in the monitored environment, although multiple agent plugins collecting only transaction data can share a single Analytics Agent, as shown below:

![Realworld Scenario](../images/pdf2.png)

In this example, AppServerHost1-3 collect only transaction data, and only app agents are required. Each one connects to the Analytics Agent on AppServerHost4. The analytics agent forwards the transaction analytics data to the event service. Finally, the controller fetches the analytics data from the event service and renders it to the controller analytics dashboard.

Follow the steps below to configure Transaction Analytics for your VMware Tanzu apps.

#### <a id="step1"></a> Step 1: Configure Tile for Analytics

1. In the **Analytics Agent** section of the AppDynamics tile, choose **Enable** under **Enable Transaction Analytics**.
  ![Analytics Config For Tile GUI](../images/Analytics1.png)

1. Paste in the **Global Account Name** and **Access Key** from the AppDynamics Controller license page.
  ![License Page](../images/Analytics2.png)

1. Specify the AppDynamics **Analytics Event Service URL** if you already have one. If you do not have one, contact AppDynamics support. The Analytics Event Service URL is in the following format: `http://analytics-event-service.com:80`.

1. Click **Save**.

1. After the tile updates successfully, you can verify that each analytics agent runs as a CF application in the **AppDynamicsVMware TanzuOpsMetrics-service-org** org. The name of each analytics agent is **AppDynamicsAnalytics**, with a route `appdynamics-analytics.DOMAIN-NAME`. See the following example:
    <pre class="terminal">
    $ cf target -o AppDynamicsVMware TanzuOpsMetrics-service-org
    $ cf apps
    Getting apps in org AppDynamicsVMware TanzuOpsMetrics-service-org / space AppDynamicsVMware TanzuOpsMetrics-service-space as admin...
    OK
    name                       requested state   instances   memory   disk   url</pre>

#### <a id="step2"></a>Step 2: Bind Application to Analytics Agent

After deploying the tile, follow the steps below to bind an application with the analytics agent to collect analytics data.

<p class="note"><strong>Note:</strong> The analytics agent is compatible with Java and .NET applications.</p>

1. Set a JAVA system property on the application to forward data to analytics agent.
    <pre class="terminal">$ cf set-env TARGET-APP-NAME JAVA_OPTS "-Dappdynamics.analytics.agent.url=<span>http:</span>//appdynamics-analytics.DOMAIN-NAME/v1/sinks/bt"</pre>
    In the example above, `http://appdynamics-analytics.DOMAIN-NAME` is the URL of the analytics agent running in the **AppDynamicsVMware TanzuOpsMetrics-service-org** org.

1. Restage the application for the changes to take effect.
    <pre class="terminal">$ cf restage TARGET-APP-NAME</pre>

#### <a id="step3"></a>Step 3: Configure Controller to Fetch Data from Event Service

 - **For customers using SaaS controllers**: Your Controller is already configured to fetch data from a SaaS event service.
 - **For customers using an on-premise controller**: Log in to your Controller as an admin and configure the event service URL and controller key for authentication, as shown below.

![AdminPage](../images/ControllerAdminForAnalytics.png)

For help with this configuration, contact AppDynamics support.

#### <a id="step4"></a> Step 4: Configure Analytics Collector on the Controller

On your AppDynamics Controller, do the following to configure the analytics collector for a target application:

1. Click **Analytics**.
  ![ConfigureAnalyticsCollector](../images/Analytics3.png)

1. From the **Configure Analytics for Applications** drop-down, choose the same target application for which you set the JAVA system property in the previous step.

1. Select the checkbox to enable analytics data.

1. Add transactions for which you wish to report analytics data.
  ![enter image description here](../images/Analytics4.png)

1. (Optional) Configure the **HTTP Data Collectors** and **Transactions for GUID Injection** fields. For more information, see the AppDynamics documentation:
  - [Configure HTTP Data Collectors](https://docs.appdynamics.com/display/PRO42/Configuring+Transaction+Analytics): This enables collection of additional business data using HTTP Data Collectors.
  - [Configure Transactions for GUID Injection](https://docs.appdynamics.com/display/PRO42/Business+Transaction+and+Log+Correlation): By configuring business transactions for GUID injection, you can correlate logs to specific business transaction requests. This can be helpful when you see slow transactions and the call graph does not give you enough information to get to the root cause. You can use this feature to get the full context related to a failed or slow transaction.
   ![Optional Fields](../images/Analytics5.png)

#### <a id="step5"></a> Step 5: Analyze Business Transactions Using Analytics

1. Generate some traffic for your application.

1. Click **Analytics** on your AppDynamics controller.
  ![Analytics Tab](../images/Analytics7.png)

1. Click **Add** to see a list of all configured business transactions.
  ![Analytics Data](../images/Analytics8.png)

This document describes how to configure a database agent and see database metrics on the AppDynamics controller.


## <a id="DataBaseMonitoring"></a> AppDynamics v1.x DataBaseMonitoring

 - If your AppDynamics controller has license for Database monitoring, you can monitor databases in VMware Tanzu.
 - Supported database agent **v4.2.15.18**
 - Supported databases:
  ![DBSupport](../images/DBSupport.png)
 - The database agent and Controller compatibility is decided on the agent version. If you are using agent v4.2.15.18, the controller should be on v4.2.x or later.

### <a id="agent"></a> Step 1: Configure Tile for Database Agent

1. You can configure any service plan to deploy database agents. To configure a database agent, do the following:
  1. Select the **Enable Database Monitoring** checkbox.
  1. Specify a supported database agent version.
  1. Specify the number of database agents to deploy for the service plan.
  1. Click **Save**.

1. After the tile installs, you can verify that each database agent runs as a Cloud Foundry (CF) application within the `AppDynamics-DB-Visibility` org. The name of each database agent application is `DBAgent-SERVICE_PLAN_NAME-INDEX`. See the following example:
      <pre class="terminal">
      $ cf target -o AppDynamics-DB-Visibility
      $ cf apps
      Getting apps in org AppDynamics-DB-Visibility / space AppDynamics-DB-Visibility-space as admin...
      OK
      name     requested      state      instances    memory         disk     urls
      DBAgent-svcplan-1    started     1/1     1&nbsp;G     1&nbsp;G
      DBAgent-svcplan-2    started     1/1     1&nbsp;G     1&nbsp;G</pre>
      Here, `svcplan` is the name of the service plan configured to deploy two DB agents.

### <a id="collector"></a> Step 2: Configure Database Collector

The database agent and the AppDynamics controller work together to monitor a database. The agent collects the data from the database server and passes it to the AppDynamics Controller for interpretation and display in the Controller UI. The database agent does not need to be installed on the same system hosting the database server.

<p class="note"><strong>Note:</strong> Because each database agent starts with 1&nbsp;G of memory, AppDynamics reccommends configuring at most two DB collectors for each database agent app running in VMware Tanzu.</p>

1. Open the AppDynamics controller and go to **Databases > Configuration > Collectors**.
  ![Database collector](../images/Database2.png)

1. Configure a database collector using the [Configure Database Collectors](https://docs.appdynamics.com/display/PRO41/Configure+Database+Collectors) topic from the AppDynamics docs.
  - For the **Database Agent** field in every collector, select the database agent name deployed in VMware Tanzu. In the example image below, you choose **DBAgent-VMware Tanzu-Public-Controller-1** as the **Database Agent** and not **Default DB Agent**.
    ![CollectorConfig](../images/Database3.png)

1. Once you configure and save the collector, generate some traffic on an application that includes database operations. After a couple of minutes, you can see database traffic on your AppDynamics Database Dashboard.
![DatabaseTraffic](../images/Database4.png)
